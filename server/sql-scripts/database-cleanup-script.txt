DROP TABLE forms;
DROP TABLE form_responses;
DROP TABLE consultants;
DROP TABLE customers;
DROP TABLE sales;
DROP TABLE managers;

CREATE TABLE forms (
    id SERIAL PRIMARY KEY,
    consultant_id INTEGER,
    customer_id INTEGER,
    sales_id INTEGER,
    form_response_id INTEGER,
    date DATE,
    created_at TIMESTAMP DEFAULT current_timestamp,
    updated_at TIMESTAMP DEFAULT current_timestamp
);

CREATE TABLE form_responses (
    id SERIAL PRIMARY KEY,
    q0 VARCHAR(200),
    q1 VARCHAR(200),
    q2 VARCHAR(200),
    q3 VARCHAR(200),
    q4 VARCHAR(200),
    q5 VARCHAR(200),
    q6 VARCHAR(200),
    q7 VARCHAR(200),
    q8 VARCHAR(200),
    q9 VARCHAR(200),
    q10 VARCHAR(200),
    q11 VARCHAR(200),
    q12 VARCHAR(200),
    q13 VARCHAR(200)
);

CREATE TABLE consultants (
    id SERIAL PRIMARY KEY,
    consultant_name VARCHAR(100),
    manager_id INT,
    created_at TIMESTAMP DEFAULT current_timestamp,
    updated_at TIMESTAMP DEFAULT current_timestamp
);

CREATE TABLE customers (
    id SERIAL PRIMARY KEY,
    customer_name VARCHAR(100),
    created_at TIMESTAMP DEFAULT current_timestamp,
    updated_at TIMESTAMP DEFAULT current_timestamp
);

CREATE TABLE sales (
    id SERIAL PRIMARY KEY,
    sales_name VARCHAR(100),
    created_at TIMESTAMP DEFAULT current_timestamp,
    updated_at TIMESTAMP DEFAULT current_timestamp
);

CREATE TABLE managers (
    id SERIAL PRIMARY KEY,
    manager_name VARCHAR(100),
    created_at TIMESTAMP DEFAULT current_timestamp,
    updated_at TIMESTAMP DEFAULT current_timestamp
);

CREATE FUNCTION update_timestamp()
RETURNS TRIGGER AS '
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END' LANGUAGE 'plpgsql';

CREATE TRIGGER update_trigger
BEFORE UPDATE ON forms
FOR EACH ROW
EXECUTE PROCEDURE update_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON consultants
FOR EACH ROW
EXECUTE PROCEDURE update_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON customers
FOR EACH ROW
EXECUTE PROCEDURE update_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON sales
FOR EACH ROW
EXECUTE PROCEDURE update_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON managers
FOR EACH ROW
EXECUTE PROCEDURE update_timestamp();

INSERT INTO consultants (consultant_name, manager_id) VALUES ('Agnes Davidsdottir', 5);
INSERT INTO consultants (consultant_name, manager_id) VALUES ('Wilma Axelsson', 4);
INSERT INTO consultants (consultant_name, manager_id) VALUES ('Lucas Hultqvist', 1);
INSERT INTO consultants (consultant_name, manager_id) VALUES ('Emelie Skoog', 3);

INSERT INTO customers (customer_name) VALUES ('Apoteket');
INSERT INTO customers (customer_name) VALUES ('Scania');
INSERT INTO customers (customer_name) VALUES ('Handelsbanken');
INSERT INTO customers (customer_name) VALUES ('Alstom');

INSERT INTO sales (sales_name) VALUES ('Magnus Persson');
INSERT INTO sales (sales_name) VALUES ('Sebastian Frennesson');
INSERT INTO sales (sales_name) VALUES ('Charlotte Wettermo');
INSERT INTO sales (sales_name) VALUES ('Niklas Edmark');

INSERT INTO managers (manager_name) VALUES ('Anna Sevon');
INSERT INTO managers (manager_name) VALUES ('Anton Nilsson');
INSERT INTO managers (manager_name) VALUES ('Matthias Bauhofer');
INSERT INTO managers (manager_name) VALUES ('Edward Templeton');
INSERT INTO managers (manager_name) VALUES ('Per Lundin');